package com.melocode.videoismaael.Controller;

import com.melocode.videoismaael.entities.Tache;
import com.melocode.videoismaael.services.TacheCRUD;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;

import java.util.List;
import java.util.regex.Pattern;

public class TacheController {

    // Champs de saisie pour les informations d'une t√¢che
    @FXML
    private TextField tfidTache, tfnomTache, tfdescription, tfstatut, tfidProjet;

    // Boutons pour interagir avec l'interface
    @FXML
    private Button btnValider, btnModifier, btnSupprimer, btnAfficher;

    // Liste des t√¢ches affich√©es
    @FXML
    private ListView<String> listViewTaches;

    // Instance de TacheCRUD pour g√©rer la base de donn√©es
    private final TacheCRUD tacheCRUD = new TacheCRUD();

    // üîπ M√©thode pour afficher toutes les t√¢ches dans la ListView
    public void displayTaches(ActionEvent actionEvent) {
        List<Tache> taches = tacheCRUD.getAllTaches();
        listViewTaches.getItems().clear();  // Effacer la liste avant d'ajouter les nouvelles t√¢ches

        for (Tache tache : taches) {
            listViewTaches.getItems().add(tache.toString()); // Affichage sous forme de cha√Æne de caract√®res
        }
    }

    // üîπ V√©rifier si le nom de la t√¢che est valide (lettres et espaces uniquement)
    private boolean validateNomTache(String nomTache) {
        String regex = "^[a-zA-Z\\s]+$";
        return Pattern.matches(regex, nomTache);
    }

    // üîπ Ajouter une nouvelle t√¢che
    public void saveTache(ActionEvent actionEvent) {
        try {
            // V√©rifier si les champs sont remplis
            if (tfnomTache.getText().trim().isEmpty() || tfdescription.getText().trim().isEmpty() ||
                    tfstatut.getText().trim().isEmpty() || tfidProjet.getText().trim().isEmpty()) {
                showAlert("Erreur", "Tous les champs doivent √™tre remplis.", Alert.AlertType.ERROR);
                return;
            }

            // R√©cup√©rer les valeurs des champs
            String nomTache = tfnomTache.getText().trim();
            if (!validateNomTache(nomTache)) {
                showAlert("Erreur", "Le nom de la t√¢che doit contenir uniquement des lettres.", Alert.AlertType.ERROR);
                return;
            }

            String description = tfdescription.getText().trim();
            String statut = tfstatut.getText().trim();
            int idProjet = Integer.parseInt(tfidProjet.getText().trim());

            // V√©rifier si le projet existe
            if (!tacheCRUD.projetExiste(idProjet)) {
                showAlert("Erreur", "Le projet avec ID " + idProjet + " n'existe pas.", Alert.AlertType.ERROR);
                return;
            }

            // Cr√©er la t√¢che et l'ajouter
            Tache tache = new Tache(0, nomTache, description, statut, idProjet);
            tacheCRUD.ajouterTache(tache);

            // Rafra√Æchir l'affichage
            displayTaches(actionEvent);
            showAlert("Succ√®s", "T√¢che ajout√©e avec succ√®s.", Alert.AlertType.INFORMATION);

        } catch (NumberFormatException e) {
            showAlert("Erreur", "L'ID du projet doit √™tre un nombre.", Alert.AlertType.ERROR);
        }
    }

    // üîπ Modifier une t√¢che existante
    public void updateTache(ActionEvent actionEvent) {
        try {
            // V√©rifier si les champs sont remplis
            if (tfidTache.getText().trim().isEmpty() || tfnomTache.getText().trim().isEmpty() ||
                    tfdescription.getText().trim().isEmpty() || tfstatut.getText().trim().isEmpty() ||
                    tfidProjet.getText().trim().isEmpty()) {
                showAlert("Erreur", "Tous les champs doivent √™tre remplis.", Alert.AlertType.ERROR);
                return;
            }

            // R√©cup√©rer les valeurs des champs
            int idTache = Integer.parseInt(tfidTache.getText().trim());
            String nomTache = tfnomTache.getText().trim();
            String description = tfdescription.getText().trim();
            String statut = tfstatut.getText().trim();
            int idProjet = Integer.parseInt(tfidProjet.getText().trim());

            // V√©rifier si la t√¢che existe
            if (!tacheCRUD.tacheExists(idTache)) {
                showAlert("Erreur", "La t√¢che avec ID " + idTache + " n'existe pas.", Alert.AlertType.ERROR);
                return;
            }

            // V√©rifier si le projet existe
            if (!tacheCRUD.projetExiste(idProjet)) {
                showAlert("Erreur", "Le projet avec ID " + idProjet + " n'existe pas.", Alert.AlertType.ERROR);
                return;
            }

            // Modifier la t√¢che
            Tache tacheModifiee = new Tache(idTache, nomTache, description, statut, idProjet);
            boolean success = tacheCRUD.updateTache(tacheModifiee);

            if (success) {
                displayTaches(actionEvent);
                showAlert("Succ√®s", "T√¢che modifi√©e avec succ√®s.", Alert.AlertType.INFORMATION);
            } else {
                showAlert("Erreur", "√âchec de la modification.", Alert.AlertType.ERROR);
            }

        } catch (NumberFormatException e) {
            showAlert("Erreur", "L'ID de la t√¢che et l'ID du projet doivent √™tre des nombres.", Alert.AlertType.ERROR);
        }
    }

    // üîπ Supprimer une t√¢che
    public void deleteTache(ActionEvent actionEvent) {
        try {
            // V√©rifier si le champ ID est rempli
            if (tfidTache.getText().trim().isEmpty()) {
                showAlert("Erreur", "Veuillez saisir l'ID de la t√¢che √† supprimer.", Alert.AlertType.ERROR);
                return;
            }

            int idTache = Integer.parseInt(tfidTache.getText().trim());

            // V√©rifier si la t√¢che existe
            if (!tacheCRUD.tacheExists(idTache)) {
                showAlert("Erreur", "La t√¢che avec ID " + idTache + " n'existe pas.", Alert.AlertType.ERROR);
                return;
            }

            // Supprimer la t√¢che
            boolean success = tacheCRUD.supprimerTache(idTache);
            if (success) {
                displayTaches(actionEvent);
                showAlert("Succ√®s", "T√¢che supprim√©e avec succ√®s.", Alert.AlertType.INFORMATION);
            } else {
                showAlert("Erreur", "La suppression a √©chou√©.", Alert.AlertType.ERROR);
            }

        } catch (NumberFormatException e) {
            showAlert("Erreur", "L'ID de la t√¢che doit √™tre un nombre.", Alert.AlertType.ERROR);
        }
    }

    // üîπ M√©thode pour afficher une alerte
    private void showAlert(String title, String message, Alert.AlertType type) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
